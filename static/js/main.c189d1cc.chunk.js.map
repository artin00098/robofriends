{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Searchbox.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","robots","cardComponent","map","user","i","key","Searchbox","searchfield","searchChange","onChange","type","placeholder","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCESC,EAlBF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAQC,EAAQ,EAARA,GAC5B,OAEC,yBAAKC,UAAY,wDAChB,yBAAKC,IAAG,+BAA2BF,EAA3B,aAA0CG,IAAK,UACvD,6BACC,4BACCL,GAEF,2BACEC,MCKUK,EAdE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAIZC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACtC,OAAO,kBAAC,EAAD,CAAMC,IAAMD,EAAGT,GAAKK,EAAOI,GAAGT,GAAIF,KAAOO,EAAOI,GAAGX,KAAMC,MAASM,EAAOI,GAAGV,WAEpF,OACC,6BACEO,I,4BCHWK,EAPG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC/B,OAEC,2BAAOC,SAAYD,EAClBZ,UAAW,oCAAoCc,KAAO,SAASC,YAAc,gBCkBjEC,G,wDArBd,WAAaC,GAAO,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,UAAW,GAHM,E,8DAODC,EAAQC,GACzBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACP,4DAEDG,KAAKL,MAAMO,a,GAjBOC,cCiDZC,E,kDAtCd,aAAc,IAAD,8BACZ,gBAYDC,eAAiB,SAACC,GACjB,EAAKL,SAAS,CAACZ,YAAciB,EAAMC,OAAOC,SAZ1C,EAAKZ,MAAQ,CACbd,OAAS,GACTO,YAAa,IAJD,E,gEAOO,IAAD,OAClBoB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACnB,OAAO+B,S,+BAO3B,IAAD,EACuBb,KAAKJ,MAA7Bd,EADC,EACDA,OAASO,EADR,EACQA,YACVyB,EAAiBhC,EAAOiC,QAAO,SAAAC,GACpC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS7B,EAAY4B,kBAEtD,OAAQnC,EAAOqC,OAGb,yBAAKzC,UAAY,MAChB,wBAAIA,UAAY,MAAhB,gBACA,kBAAC,EAAD,CAAWY,aACVU,KAAKK,iBACL,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUvB,OAAUgC,MAPtB,kD,GAxBaX,aCDlBiB,IAASC,OACP,kBAAC,EAAD,MACCC,SAASC,eAAe,SNsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.c189d1cc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name, email , id }) =>{\r\n\treturn (\r\n\r\n\t\t<div className = \" tc bg-light-green dib br2 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src ={`https://robohash.org/${id}?200*200\"`} alt =\"photo\" />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>\r\n\t\t\t\t{name}\t\r\n\t\t\t\t</h2>\r\n\t\t\t<p>\r\n\t\t\t\t{email}\r\n\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;    ","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\t// if (true){\r\n\t// \tthrow new Error('Nooooo!');\r\n\t// }\r\n\tconst cardComponent = robots.map((user,i) =>{\r\n\t\treturn <Card key ={i} id ={robots[i].id} name= {robots[i].name} email = {robots[i].email} />\r\n\t})\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardComponent}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield,searchChange}) =>{\r\n\treturn(\r\n\r\n\t\t<input onChange = {searchChange}\r\n\t\t className =\" pa3 ba b--green bg-lightest-blue\" type = 'search' placeholder = 'just do it' />\r\n\t);\r\n}\r\nexport default Searchbox;","import React , {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor (props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error , info){\r\n\t\tthis.setState({hasError: true});\r\n\r\n\t}\r\n\trender()\r\n\t{\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1> Ooooops . That is not good </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from  '../components/Searchbox';\r\nimport {robots} from '../robots';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n\r\nconst state = {\r\n\trobots : robots,\r\n\tseachfield: ''\r\n}\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\trobots : [],\r\n\t\tsearchfield: ''\r\n\t}\r\n}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots:users}));\r\n\t}\r\n\r\n\tonSearchChange = (event)=>{\r\n\t\tthis.setState({searchfield : event.target.value})\r\n\t\t\r\n\t}\r\n\t\trender() {\r\n\t\t\tconst {robots , searchfield} = this.state;\r\n\t\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\t return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t\t})\r\n\t\t\treturn !robots.length ? \r\n\t\t\t\t <h1> Loading .... </h1> :\r\n\t\t\t\t (\r\n\t\t\t\t\t<div className = \"tc\">\r\n\t\t\t\t\t\t<h1 className = \"f1\"> Robofriends</h1>\r\n\t\t\t\t\t\t<Searchbox searchChange = \r\n\t\t\t\t\t\t{this.onSearchChange} />\r\n \t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots = {filteredRobots} />\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t\r\n\t\t}\r\n\t\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport Card from './components/Card';\nimport { robots } from './robots';\nimport CardList from './components/CardList';\nimport App from './containers/App';\nimport Searchbox from  './components/Searchbox';\n\nReactDOM.render(\n\t\t<App />\n\t ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}